Index: app/src/main/res/layout/history.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        tools:context=\".view.HistoryActivity\"\r\n        android:background=\"@drawable/padure\">\r\n    <ImageButton\r\n        android:layout_width=\"35dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:scaleType=\"fitXY\"\r\n        android:src=\"@drawable/homebutton\"\r\n        android:background=\"@null\"\r\n        android:id=\"@+id/homeButton\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/historyButton\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/historyButton\"/>\r\n    <ImageButton\r\n        android:layout_width=\"37dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:scaleType=\"fitXY\"\r\n        android:src=\"@drawable/historybutton\"\r\n        android:id=\"@+id/historyButton\"\r\n        android:background=\"@null\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/homeButton\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/helpButton\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/helpButton\"/>\r\n    <ImageButton\r\n        android:layout_width=\"32dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:scaleType=\"fitXY\"\r\n        android:src=\"@drawable/helpbutton\"\r\n        android:id=\"@+id/helpButton\"\r\n        android:background=\"@null\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/historyButton\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/aboutUsButton\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/aboutUsButton\"/>\r\n\r\n    <ImageButton\r\n        android:layout_width=\"49dp\"\r\n        android:layout_height=\"50dp\"\r\n        android:scaleType=\"fitXY\"\r\n        android:layout_marginBottom=\"10dp\"\r\n        android:src=\"@drawable/aboutusbutton\"\r\n        android:id=\"@+id/aboutUsButton\"\r\n        android:background=\"@null\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/helpButton\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"/>\r\n    <ImageView\r\n            android:layout_width=\"329dp\"\r\n            android:layout_height=\"165dp\"\r\n            android:src=\"@drawable/myplants\"\r\n            android:id=\"@+id/myplants\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            tools:layout_editor_absoluteX=\"1dp\"/>\r\n    <ImageButton\r\n            android:layout_width=\"50dp\"\r\n            android:layout_height=\"50dp\"\r\n        android:scaleType=\"fitXY\"\r\n            android:src=\"@drawable/search\"\r\n            android:background=\"@null\"\r\n            app:layout_constraintStart_toEndOf=\"@id/myplants\"\r\n            app:layout_constraintTop_toTopOf=\"@+id/myplants\"\r\n            app:layout_constraintBottom_toBottomOf=\"@+id/myplants\" app:layout_constraintEnd_toEndOf=\"parent\"/>\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/history.xml	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/res/layout/history.xml	(date 1620567702061)
@@ -71,5 +71,16 @@
             app:layout_constraintTop_toTopOf="@+id/myplants"
             app:layout_constraintBottom_toBottomOf="@+id/myplants" app:layout_constraintEnd_toEndOf="parent"/>
 
+    <GridView
+        android:id="@+id/gridView"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:numColumns="3"
+        android:verticalSpacing="50dp"
+        app:layout_constraintBottom_toTopOf="@+id/homeButton"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/myplants"/>
+
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/kodama/view/HistoryActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kodama.view;\r\n\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport com.example.kodama.R;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.installations.FirebaseInstallations;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class HistoryActivity<id> extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n\r\n        super.onCreate(savedInstanceState);\r\n        final int flags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\r\n\r\n        getWindow().getDecorView().setSystemUiVisibility(flags);\r\n        final View decorView = getWindow().getDecorView();\r\n        decorView\r\n                .setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()\r\n                {\r\n\r\n                    @Override\r\n                    public void onSystemUiVisibilityChange(int visibility)\r\n                    {\r\n                        if((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0)\r\n                        {\r\n                            decorView.setSystemUiVisibility(flags);\r\n                        }\r\n                    }\r\n                });\r\n        setContentView(R.layout.history);\r\n\r\n        ImageButton historyButton = (ImageButton) findViewById(R.id.historyButton);\r\n        ImageButton helpButton = (ImageButton) findViewById(R.id.helpButton);\r\n        ImageButton aboutUsButton = (ImageButton) findViewById(R.id.aboutUsButton);\r\n        ImageButton homeButton = (ImageButton) findViewById(R.id.homeButton);\r\n\r\n        homeButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(HistoryActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n        historyButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(HistoryActivity.this, HistoryActivity.class));\r\n            }\r\n        });\r\n\r\n        helpButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(HistoryActivity.this, HelpActivity.class));\r\n            }\r\n        });\r\n        aboutUsButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(HistoryActivity.this, AboutUsActivity.class));\r\n            }\r\n        });\r\n\r\n        Toast.makeText(getApplicationContext(),id, Toast.LENGTH_SHORT).show();\r\n\r\n\r\n\r\n    }\r\n    public void onWindowFocusChanged(boolean hasFocus){\r\n        super.onWindowFocusChanged(hasFocus);\r\n        View decorView = getWindow().getDecorView();\r\n        if(hasFocus){\r\n            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                    |View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                    |View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\r\n        }\r\n    }\r\n\r\n    String id = UUID.randomUUID().toString();\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/kodama/view/HistoryActivity.java	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/java/com/example/kodama/view/HistoryActivity.java	(date 1620568215417)
@@ -5,6 +5,7 @@
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
+import android.widget.GridView;
 import android.widget.ImageButton;
 import android.widget.Toast;
 
@@ -17,7 +18,7 @@
 
 import java.util.UUID;
 
-public class HistoryActivity<id> extends AppCompatActivity {
+public class HistoryActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -51,6 +52,9 @@
         ImageButton helpButton = (ImageButton) findViewById(R.id.helpButton);
         ImageButton aboutUsButton = (ImageButton) findViewById(R.id.aboutUsButton);
         ImageButton homeButton = (ImageButton) findViewById(R.id.homeButton);
+        GridView gridView = (GridView) findViewById(R.id.gridView);
+
+        //gridView.setOnClickListener(new );
 
         homeButton.setOnClickListener(new View.OnClickListener() {
             @Override
Index: app/src/main/res/layout/plant_page.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n             android:layout_width=\"match_parent\"\r\n             android:layout_height=\"match_parent\">\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/plant_page.xml	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/res/layout/plant_page.xml	(date 1620553376875)
@@ -1,6 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
-             android:layout_width="match_parent"
-             android:layout_height="match_parent">
+
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    tools:context=".view.PlantPageActivity">
+
+    <TextView
+        android:id="@+id/plantName"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Ceva"
+        android:textSize="40dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+
 
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/kodama/view/PlantPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kodama.view;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\n\r\npublic class PlantPageActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/kodama/view/PlantPageActivity.java	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/java/com/example/kodama/view/PlantPageActivity.java	(date 1620566422783)
@@ -1,13 +1,102 @@
 package com.example.kodama.view;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
 import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.example.kodama.R;
+import com.example.kodama.models.Plants;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.Query;
+import com.google.firebase.database.ValueEventListener;
+
+import org.jetbrains.annotations.NotNull;
 
 public class PlantPageActivity extends AppCompatActivity {
 
+    private String textToFind;
+    private static final String PLANT_NAME = "plant_name";
+    DatabaseReference databaseReference ;
+    private String rename = "moarte";
+
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
+        TextView plantName = (TextView) findViewById(R.id.plantName);
+
+        final int flags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
+
+        getWindow().getDecorView().setSystemUiVisibility(flags);
+        final View decorView = getWindow().getDecorView();
+        decorView
+                .setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()
+                {
+
+                    @Override
+                    public void onSystemUiVisibilityChange(int visibility)
+                    {
+                        if((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0)
+                        {
+                            decorView.setSystemUiVisibility(flags);
+                        }
+                    }
+                });
+        setContentView(R.layout.plant_page);
+
+        textToFind = getIntent().getStringExtra(PLANT_NAME);
+        //Toast.makeText(getApplicationContext(),textToFind, Toast.LENGTH_SHORT).show();
+
+//        databaseReference = FirebaseDatabase.getInstance().getReference("Plants");
+//        databaseReference.addListenerForSingleValueEvent(valueEventListener);
+
+        Query query = FirebaseDatabase.getInstance().getReference("Plants").orderByChild("Name").equalTo(textToFind);
+        query.addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull @NotNull DataSnapshot snapshot) {
+                if (snapshot.exists()) {
+                    String plantNameDb = snapshot.child(textToFind).child("Name").getValue(String.class);
+                    String plantsScientificNameDb = snapshot.child(textToFind).child("Scientific name").getValue(String.class);
+                    String plantsScientificNameDb2 = snapshot.child(textToFind).child("Scientific name").getValue(String.class);
+                   // Toast.makeText(getApplicationContext(),plantNameDb, Toast.LENGTH_SHORT).show();
+
+                }
+            }
+
+            @Override
+            public void onCancelled(@NonNull @NotNull DatabaseError error) {
+                Log.e("firebase", "loadPost:onCancelled", error.toException());
+            }
+        });
+
+       // plantName.setText(rename);
+        // Toast.makeText(getApplicationContext(),rename, Toast.LENGTH_LONG).show();
+    }
+
+    public void onWindowFocusChanged(boolean hasFocus){
+        super.onWindowFocusChanged(hasFocus);
+        View decorView = getWindow().getDecorView();
+        if(hasFocus){
+            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                    |View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
+                    |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                    |View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                    |View.SYSTEM_UI_FLAG_FULLSCREEN
+                    |View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
+        }
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/kodama/view/CameraActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kodama.view;\r\n\r\nimport android.Manifest;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.ImageFormat;\r\nimport android.graphics.SurfaceTexture;\r\nimport android.hardware.camera2.CameraAccessException;\r\nimport android.hardware.camera2.CameraCaptureSession;\r\nimport android.hardware.camera2.CameraCharacteristics;\r\nimport android.hardware.camera2.CameraDevice;\r\nimport android.hardware.camera2.CameraManager;\r\nimport android.hardware.camera2.CaptureRequest;\r\nimport android.hardware.camera2.CaptureResult;\r\nimport android.hardware.camera2.TotalCaptureResult;\r\nimport android.hardware.camera2.params.StreamConfigurationMap;\r\nimport android.media.Image;\r\nimport android.media.ImageReader;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Size;\r\nimport android.util.SparseIntArray;\r\nimport android.view.Surface;\r\nimport android.view.TextureView;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.example.kodama.R;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.nio.ByteBuffer;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\nimport static java.util.Collections.min;\r\n\r\n@RequiresApi(api = Build.VERSION_CODES.R)\r\npublic class CameraActivity extends AppCompatActivity {\r\n\r\n    private static final String IMAGE_FILE_LOCATION = \"image_file_location\";\r\n    private int screenWidth;\r\n    private int screenHeight;\r\n\r\n\r\n\r\n    private TextureView mTextureView;\r\n    private static final int REQUEST_CAMERA_PERMISSION_RESULT = 0;\r\n    private static final int STATE_PREVIEW = 0;\r\n    private static final int STATE_WAIT_LOCK = 1;\r\n    private int mCaptureState = STATE_PREVIEW;\r\n    /**\r\n     * Max preview width that is guaranteed by Camera2 API\r\n     */\r\n    private static final int MAX_PREVIEW_WIDTH = 1920;\r\n\r\n    /**\r\n     * Max preview height that is guaranteed by Camera2 API\r\n     */\r\n    private static final int MAX_PREVIEW_HEIGHT = 1080;\r\n\r\n    private TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {\r\n        @Override\r\n        public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surface, int width, int height) {\r\n            setupCamera(width,height);\r\n            connectCamera();\r\n        }\r\n\r\n        @Override\r\n        public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surface, int width, int height) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public boolean onSurfaceTextureDestroyed(@NonNull SurfaceTexture surface) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onSurfaceTextureUpdated(@NonNull SurfaceTexture surface) {\r\n\r\n        }\r\n    };\r\n\r\n    private CameraDevice mCameraDevice;\r\n    private CameraDevice.StateCallback mCameraDeviceStateCallBack = new CameraDevice.StateCallback() {\r\n        @Override\r\n        public void onOpened(@NonNull CameraDevice camera) {\r\n            mCameraDevice = camera;\r\n            startPreview();\r\n            //Toast.makeText(getApplicationContext(),\"camera connection made\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n        @Override\r\n        public void onDisconnected(@NonNull CameraDevice camera) {\r\n            camera.close();\r\n            mCameraDevice = null;\r\n        }\r\n\r\n        @Override\r\n        public void onError(@NonNull CameraDevice camera, int error) {\r\n            camera.close();\r\n            mCameraDevice = null;\r\n        }\r\n    };\r\n\r\n    private HandlerThread mBackgroundHandlerThread;\r\n    private Handler mBackgroundHandler;\r\n    private String mCameraID;\r\n    private Size mPreviewSize;\r\n    private Size mImageSize;\r\n    private ImageReader mImageReader;\r\n\r\n\r\n    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener = new ImageReader.OnImageAvailableListener() {\r\n        @Override\r\n        public void onImageAvailable(ImageReader reader) {\r\n            mBackgroundHandler.post(new ImageSaver(reader.acquireLatestImage()));\r\n        }\r\n    };\r\n\r\n    private class ImageSaver implements Runnable{\r\n        private final Image mImage;\r\n\r\n        private ImageSaver(Image mImage) {\r\n            this.mImage = mImage;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            ByteBuffer byteBuffer = mImage.getPlanes()[0].getBuffer();\r\n            byte[] bytes = new byte[byteBuffer.remaining()];\r\n            byteBuffer.get(bytes);\r\n            FileOutputStream fileOutputStream = null;\r\n            try {\r\n                fileOutputStream = new FileOutputStream(mImageFileName);\r\n                fileOutputStream.write(bytes);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                mImage.close();\r\n\r\n              //  Intent mediaStoreUpdateIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n             //   mediaStoreUpdateIntent.setData(Uri.fromFile(new File(mImageFileName)));\r\n               // sendBroadcast(mediaStoreUpdateIntent);\r\n\r\n                Intent viewPictureIntent = new Intent(CameraActivity.this, RetakePhotoActivity.class);\r\n                viewPictureIntent.putExtra(IMAGE_FILE_LOCATION,  mImageFileName);// ??\r\n\r\n\r\n                if(fileOutputStream != null){\r\n                    try {\r\n                        fileOutputStream.close();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                startActivity(viewPictureIntent);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private int mTotalRotation;\r\n    private CameraCaptureSession mPreviewCaptureSession;\r\n    private CameraCaptureSession.CaptureCallback mPreviewCaptureCallback = new CameraCaptureSession.CaptureCallback() {\r\n        private void process(CaptureResult captureResult){\r\n            switch (mCaptureState){\r\n                case STATE_PREVIEW:\r\n                    //do nothing\r\n                    break;\r\n                case STATE_WAIT_LOCK:\r\n                    mCaptureState = STATE_PREVIEW;\r\n                    Integer afState = captureResult.get(CaptureResult.CONTROL_AF_STATE);\r\n                    if(afState == CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED || afState == CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED ){\r\n                        startStillCaptureRequest();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        @Override\r\n        public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {\r\n            super.onCaptureCompleted(session, request, result);\r\n            process(result);\r\n        }\r\n    };\r\n\r\n    private Button mCapturePhotoButton;\r\n    private CaptureRequest.Builder mCaptureRequestBuilder;\r\n\r\n    private File mImageFolder;\r\n    private String mImageFileName;\r\n\r\n    private static SparseIntArray ORIENTATIONS = new SparseIntArray();\r\n    static {\r\n        ORIENTATIONS.append(Surface.ROTATION_0, 90);\r\n        ORIENTATIONS.append(Surface.ROTATION_90, 0);\r\n        ORIENTATIONS.append(Surface.ROTATION_180, 270);\r\n        ORIENTATIONS.append(Surface.ROTATION_270, 180);\r\n    }\r\n\r\n\r\n    private static class CompareSizeByArea implements Comparator<Size>{\r\n\r\n        @Override\r\n        public int compare(Size o1, Size o2) {\r\n            return Long.signum((long) o1.getWidth()* o1.getWidth()/(long)o2.getWidth()*o2.getHeight());\r\n        }\r\n    }\r\n\r\n    protected void onCreate(Bundle savedInstanceState ) {\r\n        super.onCreate(savedInstanceState);\r\n        final int flags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\r\n\r\n        getWindow().getDecorView().setSystemUiVisibility(flags);\r\n        final View decorView = getWindow().getDecorView();\r\n        decorView\r\n                .setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()\r\n                {\r\n\r\n                    @Override\r\n                    public void onSystemUiVisibilityChange(int visibility)\r\n                    {\r\n                        if((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0)\r\n                        {\r\n                            decorView.setSystemUiVisibility(flags);\r\n                        }\r\n                    }\r\n                });\r\n        setContentView(R.layout.android_camera);\r\n\r\n        createImageFolder();\r\n\r\n        mCapturePhotoButton = (Button) findViewById(R.id.btn_takepicture);\r\n        ImageButton backButton = (ImageButton) findViewById(R.id.back_button_camera);\r\n\r\n        backButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                closeCamera();\r\n                startActivity(new Intent(CameraActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n        mCapturePhotoButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                lockFocus();\r\n            }\r\n        });\r\n        mCapturePhotoButton.setOnClickListener(new View.OnClickListener()\r\n        {\r\n            @Override\r\n            public void onClick(View v)\r\n            {\r\n                if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)\r\n                {\r\n                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION_RESULT); //MY_CAMERA_PERMISSION_CODE\r\n                }\r\n                else\r\n                {\r\n                    lockFocus();\r\n                }\r\n            }\r\n        });\r\n\r\n        mTextureView = (TextureView) findViewById(R.id.texture);\r\n\r\n\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        WindowManager windowmanager = (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);\r\n        windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        int deviceWidth = displayMetrics.widthPixels;\r\n        int deviceHeight = displayMetrics.heightPixels;\r\n        this.screenWidth = deviceWidth;\r\n        this.screenHeight = deviceHeight;\r\n\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\r\n            mCapturePhotoButton.setEnabled(false);\r\n            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE }, 0);\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume(){\r\n        super.onResume();\r\n        startBackgroundThread();\r\n        if(mTextureView.isAvailable()){\r\n            setupCamera(mTextureView.getWidth(), mTextureView.getHeight());\r\n            connectCamera();\r\n        }else {\r\n            mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);\r\n        }\r\n    }\r\n\r\n\r\n    public void onRequestCameraPermissionResult(int requestCode, String[] permissions, int[] grantResult){ // unde folosim asta?\r\n        super.onRequestPermissionsResult(requestCode,permissions,grantResult);\r\n        if(requestCode == REQUEST_CAMERA_PERMISSION_RESULT){\r\n            if(grantResult[0] != PackageManager.PERMISSION_GRANTED){\r\n                Toast.makeText(getApplicationContext(),\"app won't run without camera services\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected void onPause() {\r\n        closeCamera();\r\n        stopBackgroundThread();\r\n        super.onPause();\r\n    }\r\n    @Override\r\n    public void onWindowFocusChanged(boolean hasFocus) {\r\n        super.onWindowFocusChanged(hasFocus);\r\n        View decorView = getWindow().getDecorView();\r\n        if(hasFocus){\r\n            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                    |View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                    |View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\r\n        }\r\n    }\r\n\r\n    private void setupCamera( int width, int height){\r\n        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\r\n        try {\r\n            for(String cameraID : cameraManager.getCameraIdList()){\r\n                CameraCharacteristics cameraCharacteristics = cameraManager.getCameraCharacteristics(cameraID);\r\n                if(cameraCharacteristics.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT){\r\n                    continue;\r\n                }\r\n                StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);\r\n\r\n                if (map == null) {\r\n                    continue;\r\n                }\r\n\r\n                Size largest = Collections.max(\r\n                        Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),\r\n                        new CompareSizeByArea());\r\n\r\n                int deviceOrientation = getWindowManager().getDefaultDisplay().getRotation();\r\n                mTotalRotation = sensorToDeviceRotation(cameraCharacteristics,deviceOrientation);\r\n\r\n\r\n                int maxRotatedWidth = screenWidth;\r\n                int maxRotatedHeight = screenHeight;\r\n                int rotatedWidth = width;\r\n                int rotatedHeight = height;\r\n\r\n\r\n                if (maxRotatedWidth > MAX_PREVIEW_WIDTH) {\r\n                    maxRotatedWidth = MAX_PREVIEW_WIDTH;\r\n                }\r\n\r\n                if (maxRotatedHeight > MAX_PREVIEW_HEIGHT) {\r\n                    maxRotatedHeight = MAX_PREVIEW_HEIGHT;\r\n                }\r\n\r\n                //mPreviewSize = choosePreviewOptimalSize(map.getOutputSizes(SurfaceTexture.class), rotatedWidth, rotatedHeight, maxRotatedWidth, maxRotatedHeight, largest);\r\n                mPreviewSize = getPreferredPreviewSize(map.getOutputSizes(SurfaceTexture.class), rotatedWidth, rotatedHeight);\r\n\r\n\r\n                mImageSize = chooseOptimalSize(map.getOutputSizes(ImageFormat.JPEG),rotatedWidth,rotatedHeight);\r\n                mImageReader = ImageReader.newInstance(mImageSize.getWidth(),mImageSize.getHeight(),ImageFormat.JPEG,1);\r\n                mImageReader.setOnImageAvailableListener(mOnImageAvailableListener, mBackgroundHandler);\r\n                mCameraID = cameraID;\r\n                return;\r\n            }\r\n        }\r\n        catch (CameraAccessException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private void connectCamera(){\r\n        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);\r\n        try {\r\n            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\r\n                if(ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED){\r\n                    cameraManager.openCamera(mCameraID,mCameraDeviceStateCallBack,mBackgroundHandler);\r\n                }\r\n                else {\r\n                    if(shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)){\r\n                        Toast.makeText(this,\"app reqquires permission to camera\", Toast.LENGTH_LONG).show();\r\n                    }\r\n                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION_RESULT);\r\n                }\r\n            }else{\r\n                cameraManager.openCamera(mCameraID,mCameraDeviceStateCallBack,mBackgroundHandler);\r\n            }\r\n        }\r\n        catch (CameraAccessException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void startPreview(){\r\n        SurfaceTexture surfaceTexture = mTextureView.getSurfaceTexture();\r\n        surfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(),mPreviewSize.getHeight());\r\n\r\n        Surface previewSurface = new Surface(surfaceTexture);\r\n        try {\r\n            mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);\r\n            mCaptureRequestBuilder.addTarget(previewSurface);\r\n\r\n            mCameraDevice.createCaptureSession(Arrays.asList(previewSurface,mImageReader.getSurface()), new CameraCaptureSession.StateCallback() {\r\n                @Override\r\n                public void onConfigured(@NonNull CameraCaptureSession session) {\r\n                    mPreviewCaptureSession = session;\r\n                    try {\r\n                        mPreviewCaptureSession.setRepeatingRequest(mCaptureRequestBuilder.build(),null, mBackgroundHandler);\r\n                    } catch (CameraAccessException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                @Override\r\n                public void onConfigureFailed(@NonNull CameraCaptureSession session) {\r\n                    Toast.makeText(getApplicationContext(), \"unable to setup camera preview\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            },null);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private void startStillCaptureRequest(){\r\n        try {\r\n            mCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);\r\n            mCaptureRequestBuilder.addTarget(mImageReader.getSurface());\r\n                mCaptureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION,mTotalRotation);\r\n\r\n\r\n\r\n            CameraCaptureSession.CaptureCallback stillCaptureCallback = new CameraCaptureSession.CaptureCallback() {\r\n                @Override\r\n                public void onCaptureStarted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, long timestamp, long frameNumber) {\r\n                    super.onCaptureStarted(session, request, timestamp, frameNumber);\r\n                    try {\r\n                        createImageFileName();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            };\r\n            mPreviewCaptureSession.capture(mCaptureRequestBuilder.build(),stillCaptureCallback, null );\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private void closeCamera(){\r\n        if(mCameraDevice != null){\r\n            mCameraDevice.close();\r\n            mCameraDevice = null;\r\n        }\r\n    }\r\n\r\n    private void startBackgroundThread(){\r\n        mBackgroundHandlerThread = new HandlerThread(\"Camera\");\r\n        mBackgroundHandlerThread.start();\r\n        mBackgroundHandler = new Handler(mBackgroundHandlerThread.getLooper());\r\n    }\r\n\r\n    private void stopBackgroundThread(){\r\n        mBackgroundHandlerThread.quitSafely();\r\n        try {\r\n            mBackgroundHandlerThread.join();\r\n            mBackgroundHandlerThread = null;\r\n            mBackgroundHandler = null;\r\n        }\r\n        catch (InterruptedException e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private static int sensorToDeviceRotation(CameraCharacteristics cameraCharacteristics, int deviceOrientation){\r\n        int sensorOrientation = cameraCharacteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);\r\n        deviceOrientation = ORIENTATIONS.get(deviceOrientation);\r\n        return (sensorOrientation + deviceOrientation + 360)%360;\r\n    }\r\n\r\n    private static Size chooseOptimalSize(Size[] choices, int width, int height){\r\n        List<Size> bigEnough = new ArrayList<Size>();\r\n        for(Size option : choices){\r\n            if(option.getHeight() == option.getWidth()*height/width && option.getWidth() >= width && option.getHeight() >= height){\r\n                bigEnough.add(option);\r\n            }\r\n        }\r\n        if(bigEnough.size() > 0) {\r\n            return min(bigEnough, new CompareSizeByArea());\r\n        }\r\n        else {\r\n            return choices[0];\r\n        }\r\n    }\r\n\r\n    private Size getPreferredPreviewSize(Size[] mapSizes, int width, int height) {\r\n        List<Size> collectorSizes = new ArrayList<>();\r\n        for(Size option : mapSizes) {\r\n            if(width > height) {\r\n                if(option.getWidth() > width &&\r\n                        option.getHeight() > height) {\r\n                    collectorSizes.add(option);\r\n                }\r\n            } else {\r\n                if(option.getWidth() > height &&\r\n                        option.getHeight() > width) {\r\n                    collectorSizes.add(option);\r\n                }\r\n            }\r\n        }\r\n        if(collectorSizes.size() > 0) {\r\n            return Collections.min(collectorSizes, new Comparator<Size>() {\r\n                @Override\r\n                public int compare(Size lhs, Size rhs) {\r\n                    return Long.signum(lhs.getWidth() * lhs.getHeight() - rhs.getWidth() * rhs.getHeight());\r\n                }\r\n            });\r\n        }\r\n        return mapSizes[0];\r\n    }\r\n\r\n\r\n    private void createImageFolder(){\r\n        File imageFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\r\n        mImageFolder = new File(imageFile,\"Kodama\");\r\n        if(!mImageFolder.exists()){\r\n            mImageFolder.mkdirs();\r\n        }\r\n    }\r\n\r\n    private File createImageFileName() throws IOException {\r\n        String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        String prepend = \"IMAGE_\" + timestamp + \"_\";\r\n        File imageFile = File.createTempFile(prepend,\".jpg\",mImageFolder);\r\n        mImageFileName = imageFile.getAbsolutePath();\r\n        return imageFile;\r\n    }\r\n\r\n    private void lockFocus(){\r\n        mCaptureState = STATE_WAIT_LOCK;\r\n        mCaptureRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CaptureRequest.CONTROL_AF_TRIGGER_START);\r\n        try {\r\n            mPreviewCaptureSession.capture(mCaptureRequestBuilder.build(),mPreviewCaptureCallback, mBackgroundHandler);\r\n        } catch (CameraAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/kodama/view/CameraActivity.java	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/java/com/example/kodama/view/CameraActivity.java	(date 1620551728945)
@@ -160,9 +160,6 @@
             } finally {
                 mImage.close();
 
-              //  Intent mediaStoreUpdateIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
-             //   mediaStoreUpdateIntent.setData(Uri.fromFile(new File(mImageFileName)));
-               // sendBroadcast(mediaStoreUpdateIntent);
 
                 Intent viewPictureIntent = new Intent(CameraActivity.this, RetakePhotoActivity.class);
                 viewPictureIntent.putExtra(IMAGE_FILE_LOCATION,  mImageFileName);// ??
Index: app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kodama.view;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.res.AssetFileDescriptor;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.drawable.AnimatedVectorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.kodama.R;\r\nimport com.example.kodama.controllers.PlantsController;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.installations.FirebaseInstallations;\r\n\r\nimport org.tensorflow.lite.DataType;\r\nimport org.tensorflow.lite.Interpreter;\r\nimport org.tensorflow.lite.support.common.FileUtil;\r\nimport org.tensorflow.lite.support.common.TensorOperator;\r\nimport org.tensorflow.lite.support.common.TensorProcessor;\r\nimport org.tensorflow.lite.support.common.ops.NormalizeOp;\r\nimport org.tensorflow.lite.support.image.ImageProcessor;\r\nimport org.tensorflow.lite.support.image.TensorImage;\r\nimport org.tensorflow.lite.support.image.ops.ResizeOp;\r\nimport org.tensorflow.lite.support.image.ops.ResizeWithCropOrPadOp;\r\nimport org.tensorflow.lite.support.label.TensorLabel;\r\nimport org.tensorflow.lite.support.tensorbuffer.TensorBuffer;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.nio.MappedByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n\r\npublic class RetakePhotoActivity extends Activity {\r\n\r\n    private static int RESULT_LOAD_IMAGE = 1;\r\n    private String picturePath;\r\n    private static final String IMAGE_FILE_LOCATION = \"image_file_location\";\r\n    protected Interpreter tflite;\r\n    private TensorImage inputImageBuffer;\r\n    private TensorBuffer outputProbabilityBuffer;\r\n    private TensorProcessor probabilityProcessor;\r\n    private static final float IMAGE_MEAN = 0.0f;\r\n    private static final float IMAGE_STD = 1.0f;\r\n    private static final float PROBABILITY_MEAN = 0.0f;\r\n    private static final float PROBABILITY_STD = 255.0f;\r\n    private Bitmap bitmap;\r\n    private List<String> labels;\r\n    private Uri imageuri;\r\n    private ImageView imageView;\r\n    private  int imageSizeX;\r\n    private  int imageSizeY;\r\n    private String userId;\r\n\r\n    private PlantsController plantsController = new PlantsController();\r\n\r\n    private AnimatedVectorDrawable animation;\r\n    private TextView classitext;\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        final int flags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\r\n\r\n        getWindow().getDecorView().setSystemUiVisibility(flags);\r\n        final View decorView = getWindow().getDecorView();\r\n        decorView\r\n                .setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()\r\n                {\r\n\r\n                    @Override\r\n                    public void onSystemUiVisibilityChange(int visibility)\r\n                    {\r\n                        if((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0)\r\n                        {\r\n                            decorView.setSystemUiVisibility(flags);\r\n                        }\r\n                    }\r\n                });\r\n        setContentView(R.layout.activity_retake_photo);\r\n        ImageButton retakeButton = (ImageButton) findViewById(R.id.btn_retakepicture);\r\n        ImageButton useButton = (ImageButton) findViewById(R.id.btn_usepicture);\r\n        ImageButton rechooseButton = (ImageButton) findViewById(R.id.btn_rechoose);\r\n        ImageButton cancelButton = (ImageButton) findViewById(R.id.btn_x);\r\n        ImageButton savePhoto = (ImageButton) findViewById(R.id.download_photo_button);\r\n        ImageButton gotoButton = (ImageButton) findViewById(R.id.goto_button);\r\n        ImageView savedPhoto =  (ImageView) findViewById(R.id.saved_photo_button);\r\n        ImageButton backButton = (ImageButton) findViewById(R.id.back_button);\r\n\r\n        classitext=(TextView)findViewById(R.id.classifytext);\r\n       // ImageButton useButton = (ImageButton) findViewById(R.id.useAnimated);\r\n     //   ImageView checkAnimation = (ImageView) findViewById(R.id.useAnimated) ;\r\n     //   Animatable animatable = (Animatable) checkAnimation.getDrawable();\r\n       // animatable.start();\r\n\r\n        imageView = findViewById(R.id.pictureViewRetake);\r\n\r\n        savedPhoto.setVisibility(View.GONE);\r\n        cancelButton.setVisibility(View.GONE);\r\n        classitext.setVisibility(View.GONE);\r\n\r\n\r\n        retakeButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, CameraActivity.class));\r\n            }\r\n        });\r\n\r\n        File imageFile = new File(getIntent().getStringExtra(IMAGE_FILE_LOCATION));\r\n\r\n        imageView.setImageBitmap(BitmapFactory.decodeFile(imageFile.getAbsolutePath()));\r\n        bitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());\r\n\r\n        rechooseButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n\r\n                Intent i = new Intent(\r\n                        Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n                startActivityForResult(i, RESULT_LOAD_IMAGE);\r\n\r\n            }\r\n        });\r\n\r\n        try{\r\n            tflite=new Interpreter(loadmodelfile(this));\r\n        }catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        FirebaseInstallations.getInstance().getId()\r\n                .addOnCompleteListener(new OnCompleteListener<String>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<String> task) {\r\n                        if (task.isSuccessful()) {\r\n                            userId = task.getResult();\r\n                            Log.d(\"Installations\", \"Installation ID: \" + task.getResult());\r\n                        } else {\r\n                            userId = \"eroare\";\r\n                            Log.e(\"Installations\", \"Unable to get Installation ID\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n        useButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                //get the shape of the model\r\n                int imageTensorIndex = 0;\r\n                int[] imageShape = tflite.getInputTensor(imageTensorIndex).shape(); // {1, height, width, 3}\r\n                imageSizeY = imageShape[1];\r\n                imageSizeX = imageShape[2];\r\n                DataType imageDataType = tflite.getInputTensor(imageTensorIndex).dataType();\r\n\r\n                int probabilityTensorIndex = 0;\r\n                int[] probabilityShape =\r\n                        tflite.getOutputTensor(probabilityTensorIndex).shape(); // {1, NUM_CLASSES}\r\n                DataType probabilityDataType = tflite.getOutputTensor(probabilityTensorIndex).dataType();\r\n\r\n                inputImageBuffer = new TensorImage(imageDataType);\r\n                outputProbabilityBuffer = TensorBuffer.createFixedSize(probabilityShape, probabilityDataType);\r\n                probabilityProcessor = new TensorProcessor.Builder().add(getPostprocessNormalizeOp()).build();\r\n\r\n                inputImageBuffer = loadImage(bitmap);\r\n\r\n                tflite.run(inputImageBuffer.getBuffer(),outputProbabilityBuffer.getBuffer().rewind());\r\n                showresult();\r\n                //Drawable d = useButton.getDrawable();\r\n                //if (d instanceof AnimatedVectorDrawable) {\r\n                  //  animation = (AnimatedVectorDrawable) d;\r\n                //    animation.start();\r\n               // }\r\n                useButton.setVisibility(View.GONE);\r\n                cancelButton.setVisibility((View.VISIBLE));\r\n                classitext.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n\r\n        cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n        savePhoto.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                  Intent mediaStoreUpdateIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n                  mediaStoreUpdateIntent.setData(Uri.fromFile(imageFile));\r\n                  sendBroadcast(mediaStoreUpdateIntent);\r\n                  savePhoto.setVisibility(View.GONE);\r\n                  savedPhoto.setVisibility(View.VISIBLE);\r\n\r\n\r\n            }\r\n        });\r\n\r\n\r\n        gotoButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Toast.makeText(getApplicationContext(),\"nu stiu daca in history sau mai bine catre un google. sau transformam history in baza de date\", Toast.LENGTH_SHORT).show();\r\n                startActivity(new Intent(RetakePhotoActivity.this, HistoryActivity.class));\r\n\r\n            }\r\n        });\r\n\r\n        backButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    private TensorImage loadImage(final Bitmap bitmap) {\r\n        // Loads bitmap into a TensorImage.\r\n        inputImageBuffer.load(bitmap);\r\n\r\n        // Creates processor for the TensorImage.\r\n        int cropSize = Math.min(bitmap.getWidth(), bitmap.getHeight());\r\n        //process image and resize it with required size\r\n        // TODO(b/143564309): Fuse ops inside ImageProcessor.\r\n        ImageProcessor imageProcessor =\r\n                new ImageProcessor.Builder()\r\n                        .add(new ResizeWithCropOrPadOp(cropSize, cropSize))\r\n                        .add(new ResizeOp(imageSizeX, imageSizeY, ResizeOp.ResizeMethod.NEAREST_NEIGHBOR))\r\n                        .add(getPreprocessNormalizeOp())\r\n                        .build();\r\n        return imageProcessor.process(inputImageBuffer);\r\n    }\r\n\r\n\r\n    private MappedByteBuffer loadmodelfile(Activity activity) throws IOException {\r\n        AssetFileDescriptor fileDescriptor=activity.getAssets().openFd(\"model.tflite\");\r\n        FileInputStream inputStream=new FileInputStream(fileDescriptor.getFileDescriptor());\r\n        FileChannel fileChannel=inputStream.getChannel();\r\n        long startoffset = fileDescriptor.getStartOffset();\r\n        long declaredLength=fileDescriptor.getDeclaredLength();\r\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY,startoffset,declaredLength);\r\n    }\r\n\r\n    private TensorOperator getPreprocessNormalizeOp() {\r\n        return new NormalizeOp(IMAGE_MEAN, IMAGE_STD);\r\n    }\r\n    private TensorOperator getPostprocessNormalizeOp(){\r\n        return new NormalizeOp(PROBABILITY_MEAN, PROBABILITY_STD);\r\n    }\r\n\r\n    private void showresult(){\r\n\r\n        try{\r\n            labels = FileUtil.loadLabels(this,\"dict.txt\");\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        Map<String, Float> labeledProbability =\r\n                new TensorLabel(labels, probabilityProcessor.process(outputProbabilityBuffer))\r\n                        .getMapWithFloatValue();\r\n        float maxValueInMap =(Collections.max(labeledProbability.values()));\r\n\r\n        for (Map.Entry<String, Float> entry : labeledProbability.entrySet()) {\r\n            if (entry.getValue() == maxValueInMap) {\r\n                classitext.setText(entry.getKey());\r\n            }\r\n        }\r\n        tflite.close();\r\n        if (userId == \"eroare\") {\r\n            Toast.makeText(getApplicationContext(),\"Eroare la id firebase\", Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            plantsController.addUserIdToFireBase(classitext.getText().toString(), userId, RetakePhotoActivity.this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {\r\n            Uri selectedImage = data.getData();\r\n            String[] filePathColumn = { MediaStore.Images.Media.DATA };\r\n            Cursor cursor = getContentResolver().query(selectedImage,\r\n                    filePathColumn, null, null, null);\r\n            cursor.moveToFirst();\r\n            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);\r\n            picturePath = cursor.getString(columnIndex);\r\n            cursor.close();\r\n\r\n            Intent intent = new Intent(RetakePhotoActivity.this, RetakePhotoActivity.class);\r\n            intent.putExtra(IMAGE_FILE_LOCATION, picturePath);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    public void onWindowFocusChanged(boolean hasFocus){\r\n        super.onWindowFocusChanged(hasFocus);\r\n        View decorView = getWindow().getDecorView();\r\n        if(hasFocus){\r\n            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                    |View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                    |View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java	(date 1620553172367)
@@ -10,20 +10,14 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.MediaStore;
-import android.util.Log;
 import android.view.View;
 import android.widget.ImageButton;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import androidx.annotation.NonNull;
-
 import com.example.kodama.R;
-import com.example.kodama.controllers.PlantsController;
-import com.google.android.gms.tasks.OnCompleteListener;
-import com.google.android.gms.tasks.Task;
-import com.google.firebase.installations.FirebaseInstallations;
+
 
 import org.tensorflow.lite.DataType;
 import org.tensorflow.lite.Interpreter;
@@ -53,6 +47,7 @@
     private static int RESULT_LOAD_IMAGE = 1;
     private String picturePath;
     private static final String IMAGE_FILE_LOCATION = "image_file_location";
+    private static final String PLANT_NAME = "plant_name";
     protected Interpreter tflite;
     private TensorImage inputImageBuffer;
     private TensorBuffer outputProbabilityBuffer;
@@ -67,9 +62,6 @@
     private ImageView imageView;
     private  int imageSizeX;
     private  int imageSizeY;
-    private String userId;
-
-    private PlantsController plantsController = new PlantsController();
 
     private AnimatedVectorDrawable animation;
     private TextView classitext;
@@ -109,10 +101,6 @@
         ImageButton backButton = (ImageButton) findViewById(R.id.back_button);
 
         classitext=(TextView)findViewById(R.id.classifytext);
-       // ImageButton useButton = (ImageButton) findViewById(R.id.useAnimated);
-     //   ImageView checkAnimation = (ImageView) findViewById(R.id.useAnimated) ;
-     //   Animatable animatable = (Animatable) checkAnimation.getDrawable();
-       // animatable.start();
 
         imageView = findViewById(R.id.pictureViewRetake);
 
@@ -130,6 +118,7 @@
 
         File imageFile = new File(getIntent().getStringExtra(IMAGE_FILE_LOCATION));
 
+
         imageView.setImageBitmap(BitmapFactory.decodeFile(imageFile.getAbsolutePath()));
         bitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());
 
@@ -149,20 +138,6 @@
             e.printStackTrace();
         }
 
-        FirebaseInstallations.getInstance().getId()
-                .addOnCompleteListener(new OnCompleteListener<String>() {
-                    @Override
-                    public void onComplete(@NonNull Task<String> task) {
-                        if (task.isSuccessful()) {
-                            userId = task.getResult();
-                            Log.d("Installations", "Installation ID: " + task.getResult());
-                        } else {
-                            userId = "eroare";
-                            Log.e("Installations", "Unable to get Installation ID");
-                        }
-                    }
-                });
-
         useButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -187,11 +162,6 @@
 
                 tflite.run(inputImageBuffer.getBuffer(),outputProbabilityBuffer.getBuffer().rewind());
                 showresult();
-                //Drawable d = useButton.getDrawable();
-                //if (d instanceof AnimatedVectorDrawable) {
-                  //  animation = (AnimatedVectorDrawable) d;
-                //    animation.start();
-               // }
                 useButton.setVisibility(View.GONE);
                 cancelButton.setVisibility((View.VISIBLE));
                 classitext.setVisibility(View.VISIBLE);
@@ -224,7 +194,10 @@
             @Override
             public void onClick(View v) {
                 Toast.makeText(getApplicationContext(),"nu stiu daca in history sau mai bine catre un google. sau transformam history in baza de date", Toast.LENGTH_SHORT).show();
-                startActivity(new Intent(RetakePhotoActivity.this, HistoryActivity.class));
+
+                Intent sendNameIntent = new Intent(RetakePhotoActivity.this, PlantPageActivity.class);
+                sendNameIntent.putExtra(PLANT_NAME, classitext.getText().toString());
+                startActivity(sendNameIntent);
 
             }
         });
@@ -246,7 +219,6 @@
         // Creates processor for the TensorImage.
         int cropSize = Math.min(bitmap.getWidth(), bitmap.getHeight());
         //process image and resize it with required size
-        // TODO(b/143564309): Fuse ops inside ImageProcessor.
         ImageProcessor imageProcessor =
                 new ImageProcessor.Builder()
                         .add(new ResizeWithCropOrPadOp(cropSize, cropSize))
@@ -291,11 +263,7 @@
             }
         }
         tflite.close();
-        if (userId == "eroare") {
-            Toast.makeText(getApplicationContext(),"Eroare la id firebase", Toast.LENGTH_SHORT).show();
-        } else {
-            plantsController.addUserIdToFireBase(classitext.getText().toString(), userId, RetakePhotoActivity.this);
-        }
+
     }
 
     @Override
Index: app/src/main/assets/LocalDB.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/LocalDB.json	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/assets/LocalDB.json	(date 1620567252378)
@@ -1,0 +1,18 @@
+{
+  "Plants": {
+    "Coconut": {
+      "Name": "Coconut",
+      "Description": "The coconut tree (Cocos nucifera) is a member of the palm tree family (Arecaceae) and the only living species of the genus Cocos. The term coconut can refer to the whole coconut palm, the seed, or the fruit, which botanically is a drupe, not a nut.",
+      "Scientific name": "Cocos nucifera",
+      "Link": "https://en.wikipedia.org/wiki/Coconut",
+      "Id": null
+    },
+    "Canna": {
+      "Name": "Canna",
+      "Description": "Canna indica, commonly known as Indian shot, African arrowroot, edible canna, purple arrowroot, Sierra Leone arrowroot, is a plant species in the family Cannaceae. It is native to much of South America, Central America, the West Indies, and Mexico. It is also naturalized in the southeastern United States (Florida, Texas, Louisiana, and South Carolina), and much of Europe, sub-Saharan Africa, Southeast Asia, and Oceania. Canna indica (achira in Latin America, cana-da-índia in Brazil) has been a minor food crop cultivated by indigenous peoples of the Americas for thousands of years.",
+      "Scientific name": "Canna indica",
+      "Link": "https://en.wikipedia.org/wiki/Canna_(plant)",
+      "Id": null
+    }
+  }
+}
\ No newline at end of file
Index: app/sampledata/dict.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Coconut\r\nCanna\r\nLisianthus flower\r\nWild bee balm flowers\r\nRose\r\nTulsi\r\nMullein flower - yellow\r\nChickweed\r\nTeasel flower\r\nWild Leek\r\nRanunculus flower\r\nDaisy\r\nAlmond\r\nRed clover\r\nMini Carnation - purple\r\nDelonix regia flower\r\nRose\r\nIris flower\r\nGolden champa flower\r\nHarebell flower\r\nCrimson clover\r\nCalendula flower\r\nSedum purple\r\nBlue chicory\r\nCarex\r\nMadagascar Periwinkle\r\nDaisy\r\nLarkspur flower\r\nDaffodil flower\r\nPrimrose - blue\r\nAnemone flower\r\nHyacinth flower\r\nFireweed flower\r\nMushroom\r\nSaffron flower\r\nRose hips\r\nQueen Anne's lace flower\r\nKnapweed\r\nAeonium\r\nWaxflower\r\nBael\r\nElderberry flower\r\nAmaryllis flower\r\nJoe pye weed\r\nHenna\r\nAster\r\nWild Grape Vine\r\nSt John\r\nCoronation - gold\r\nTurmeric\r\nTouch-me-not flower\r\nSolidago flower\r\nAloe vera\r\nAshwagandha\r\nPurple Deadnettle flower\r\nBlue vervain\r\nParlor palm\r\nMilk thistle flower\r\nZinnia flower - red\r\nBaby breath flower\r\nPrickly pear cactus\r\nForget-me-not\r\nLavender\r\nMarigold\r\nLily flower\r\nAmla\r\nAgapanthus\r\nOleander flower\r\nYucca\r\nTulip flower\r\nCone flower\r\nTulip\r\nPalash flower\r\nButtercup flower\r\nMustard\r\nCattails\r\nAsparagus\r\nPoinsettiaflower\r\nEchinacea\r\nTrachelium flower\r\nChamomile\r\nWhite yarrow\r\nBromeliad\r\nCrocus blue\r\nVervain Mallow flower\r\nStatice flower\r\nViola flower\r\nPompon flower\r\nPeppermint\r\nPickerelweed flower\r\nProtea\r\nNarcissistic flower\r\nTuberose flower\r\nSunflower\r\nNeem\r\nBougainvillea flower\r\nCoconut\r\nMallow flower\r\nAshoka\r\nHibiscus flower\r\nYellow sow thistle\r\nCannabis flower\r\nRose\r\nOrchid flower\r\nDatura flower\r\nLotus flower\r\nDandelion\r\nMarigold flower\r\nCinnamon\r\nJasmine flower\r\nBanana\r\nJonquil flower\r\nRed hot poker\r\nDowny yellow violet
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/sampledata/dict.txt	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/sampledata/dict.txt	(date 1620555111480)
@@ -89,7 +89,7 @@
 Peppermint
 Pickerelweed flower
 Protea
-Narcissistic flower
+Daffodil flower
 Tuberose flower
 Sunflower
 Neem
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.kodama\">\r\n\r\n\r\n\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\r\n\r\n    <uses-feature android:name=\"android.hardware.camera2.full\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".view.HomeActivity\"\r\n            android:screenOrientation=\"nosensor\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n\r\n        </activity>\r\n\r\n        <activity android:name=\".view.HelpActivity\"\r\n            android:screenOrientation=\"nosensor\"/>\r\n        <activity android:name=\".view.HistoryActivity\"\r\n            android:screenOrientation=\"nosensor\"/>\r\n        <activity android:name=\".view.AboutUsActivity\"\r\n            android:screenOrientation=\"nosensor\"/>\r\n        <activity android:name=\".view.CameraActivity\"\r\n            android:screenOrientation=\"nosensor\"/>\r\n        <activity android:name=\".view.RetakePhotoActivity\"\r\n            android:screenOrientation=\"nosensor\"/>\r\n\r\n\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 1b39367f7475abccb436f515e699c6f1e3ace73a)
+++ app/src/main/AndroidManifest.xml	(date 1620552636598)
@@ -3,13 +3,11 @@
     xmlns:tools="http://schemas.android.com/tools"
     package="com.example.kodama">
 
-
-
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
     <uses-feature android:name="android.hardware.camera2.full" />
 
@@ -20,28 +18,33 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-        <activity android:name=".view.HomeActivity"
+        <activity
+            android:name=".view.HomeActivity"
             android:screenOrientation="nosensor">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
-
         </activity>
-
-        <activity android:name=".view.HelpActivity"
-            android:screenOrientation="nosensor"/>
-        <activity android:name=".view.HistoryActivity"
-            android:screenOrientation="nosensor"/>
-        <activity android:name=".view.AboutUsActivity"
-            android:screenOrientation="nosensor"/>
-        <activity android:name=".view.CameraActivity"
-            android:screenOrientation="nosensor"/>
-        <activity android:name=".view.RetakePhotoActivity"
-            android:screenOrientation="nosensor"/>
+        <activity
+            android:name=".view.HelpActivity"
+            android:screenOrientation="nosensor" />
+        <activity
+            android:name=".view.HistoryActivity"
+            android:screenOrientation="nosensor" />
+        <activity
+            android:name=".view.AboutUsActivity"
+            android:screenOrientation="nosensor" />
+        <activity
+            android:name=".view.CameraActivity"
+            android:screenOrientation="nosensor" />
+        <activity
+            android:name=".view.RetakePhotoActivity"
+            android:screenOrientation="nosensor" />
+        <activity android:name=".view.PlantPageActivity"
+            android:screenOrientation="nosensor" />
 
-
     </application>
 
 </manifest>
\ No newline at end of file
