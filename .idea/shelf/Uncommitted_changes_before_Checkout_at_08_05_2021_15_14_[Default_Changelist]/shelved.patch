Index: app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kodama.view;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.res.AssetFileDescriptor;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.drawable.AnimatedVectorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.kodama.R;\r\n\r\nimport org.tensorflow.lite.DataType;\r\nimport org.tensorflow.lite.Interpreter;\r\nimport org.tensorflow.lite.support.common.FileUtil;\r\nimport org.tensorflow.lite.support.common.TensorOperator;\r\nimport org.tensorflow.lite.support.common.TensorProcessor;\r\nimport org.tensorflow.lite.support.common.ops.NormalizeOp;\r\nimport org.tensorflow.lite.support.image.ImageProcessor;\r\nimport org.tensorflow.lite.support.image.TensorImage;\r\nimport org.tensorflow.lite.support.image.ops.ResizeOp;\r\nimport org.tensorflow.lite.support.image.ops.ResizeWithCropOrPadOp;\r\nimport org.tensorflow.lite.support.label.TensorLabel;\r\nimport org.tensorflow.lite.support.tensorbuffer.TensorBuffer;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.nio.MappedByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n\r\npublic class RetakePhotoActivity extends Activity {\r\n\r\n    private static int RESULT_LOAD_IMAGE = 1;\r\n    private String picturePath;\r\n    private static final String IMAGE_FILE_LOCATION = \"image_file_location\";\r\n    protected Interpreter tflite;\r\n    private TensorImage inputImageBuffer;\r\n    private TensorBuffer outputProbabilityBuffer;\r\n    private TensorProcessor probabilityProcessor;\r\n    private static final float IMAGE_MEAN = 0.0f;\r\n    private static final float IMAGE_STD = 1.0f;\r\n    private static final float PROBABILITY_MEAN = 0.0f;\r\n    private static final float PROBABILITY_STD = 255.0f;\r\n    private Bitmap bitmap;\r\n    private List<String> labels;\r\n    private Uri imageuri;\r\n    private ImageView imageView;\r\n    private  int imageSizeX;\r\n    private  int imageSizeY;\r\n\r\n    private AnimatedVectorDrawable animation;\r\n    private TextView classitext;\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        final int flags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\r\n\r\n        getWindow().getDecorView().setSystemUiVisibility(flags);\r\n        final View decorView = getWindow().getDecorView();\r\n        decorView\r\n                .setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener()\r\n                {\r\n\r\n                    @Override\r\n                    public void onSystemUiVisibilityChange(int visibility)\r\n                    {\r\n                        if((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0)\r\n                        {\r\n                            decorView.setSystemUiVisibility(flags);\r\n                        }\r\n                    }\r\n                });\r\n        setContentView(R.layout.activity_retake_photo);\r\n        ImageButton retakeButton = (ImageButton) findViewById(R.id.btn_retakepicture);\r\n        ImageButton useButton = (ImageButton) findViewById(R.id.btn_usepicture);\r\n        ImageButton rechooseButton = (ImageButton) findViewById(R.id.btn_rechoose);\r\n        ImageButton cancelButton = (ImageButton) findViewById(R.id.btn_x);\r\n        ImageButton savePhoto = (ImageButton) findViewById(R.id.download_photo_button);\r\n        ImageButton gotoButton = (ImageButton) findViewById(R.id.goto_button);\r\n        ImageView savedPhoto =  (ImageView) findViewById(R.id.saved_photo_button);\r\n        ImageButton backButton = (ImageButton) findViewById(R.id.back_button);\r\n\r\n        classitext=(TextView)findViewById(R.id.classifytext);\r\n       // ImageButton useButton = (ImageButton) findViewById(R.id.useAnimated);\r\n     //   ImageView checkAnimation = (ImageView) findViewById(R.id.useAnimated) ;\r\n     //   Animatable animatable = (Animatable) checkAnimation.getDrawable();\r\n       // animatable.start();\r\n\r\n        imageView = findViewById(R.id.pictureViewRetake);\r\n\r\n        savedPhoto.setVisibility(View.GONE);\r\n        cancelButton.setVisibility(View.GONE);\r\n        classitext.setVisibility(View.GONE);\r\n\r\n\r\n        retakeButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, CameraActivity.class));\r\n            }\r\n        });\r\n\r\n        File imageFile = new File(getIntent().getStringExtra(IMAGE_FILE_LOCATION));\r\n\r\n        imageView.setImageBitmap(BitmapFactory.decodeFile(imageFile.getAbsolutePath()));\r\n        bitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());\r\n\r\n        rechooseButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View v) {\r\n\r\n                Intent i = new Intent(\r\n                        Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n                startActivityForResult(i, RESULT_LOAD_IMAGE);\r\n\r\n            }\r\n        });\r\n\r\n        try{\r\n            tflite=new Interpreter(loadmodelfile(this));\r\n        }catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        useButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                //get the shape of the model\r\n                int imageTensorIndex = 0;\r\n                int[] imageShape = tflite.getInputTensor(imageTensorIndex).shape(); // {1, height, width, 3}\r\n                imageSizeY = imageShape[1];\r\n                imageSizeX = imageShape[2];\r\n                DataType imageDataType = tflite.getInputTensor(imageTensorIndex).dataType();\r\n\r\n                int probabilityTensorIndex = 0;\r\n                int[] probabilityShape =\r\n                        tflite.getOutputTensor(probabilityTensorIndex).shape(); // {1, NUM_CLASSES}\r\n                DataType probabilityDataType = tflite.getOutputTensor(probabilityTensorIndex).dataType();\r\n\r\n                inputImageBuffer = new TensorImage(imageDataType);\r\n                outputProbabilityBuffer = TensorBuffer.createFixedSize(probabilityShape, probabilityDataType);\r\n                probabilityProcessor = new TensorProcessor.Builder().add(getPostprocessNormalizeOp()).build();\r\n\r\n                inputImageBuffer = loadImage(bitmap);\r\n\r\n                tflite.run(inputImageBuffer.getBuffer(),outputProbabilityBuffer.getBuffer().rewind());\r\n                showresult();\r\n                //Drawable d = useButton.getDrawable();\r\n                //if (d instanceof AnimatedVectorDrawable) {\r\n                  //  animation = (AnimatedVectorDrawable) d;\r\n                //    animation.start();\r\n               // }\r\n                useButton.setVisibility(View.GONE);\r\n                cancelButton.setVisibility((View.VISIBLE));\r\n                classitext.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n\r\n\r\n        cancelButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n        savePhoto.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                  Intent mediaStoreUpdateIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n                  mediaStoreUpdateIntent.setData(Uri.fromFile(imageFile));\r\n                  sendBroadcast(mediaStoreUpdateIntent);\r\n                  savePhoto.setVisibility(View.GONE);\r\n                  savedPhoto.setVisibility(View.VISIBLE);\r\n\r\n                Toast.makeText(getApplicationContext(),\"Imagine salvata. trebuie schimbat sa arate altfel+sa se salveze o data\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n\r\n\r\n        gotoButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Toast.makeText(getApplicationContext(),\"nu stiu daca in history sau mai bine catre un google. sau transformam history in baza de date\", Toast.LENGTH_SHORT).show();\r\n                startActivity(new Intent(RetakePhotoActivity.this, HistoryActivity.class));\r\n\r\n            }\r\n        });\r\n\r\n        backButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(RetakePhotoActivity.this, HomeActivity.class));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    private TensorImage loadImage(final Bitmap bitmap) {\r\n        // Loads bitmap into a TensorImage.\r\n        inputImageBuffer.load(bitmap);\r\n\r\n        // Creates processor for the TensorImage.\r\n        int cropSize = Math.min(bitmap.getWidth(), bitmap.getHeight());\r\n        //process image and resize it with required size\r\n        // TODO(b/143564309): Fuse ops inside ImageProcessor.\r\n        ImageProcessor imageProcessor =\r\n                new ImageProcessor.Builder()\r\n                        .add(new ResizeWithCropOrPadOp(cropSize, cropSize))\r\n                        .add(new ResizeOp(imageSizeX, imageSizeY, ResizeOp.ResizeMethod.NEAREST_NEIGHBOR))\r\n                        .add(getPreprocessNormalizeOp())\r\n                        .build();\r\n        return imageProcessor.process(inputImageBuffer);\r\n    }\r\n\r\n\r\n    private MappedByteBuffer loadmodelfile(Activity activity) throws IOException {\r\n        AssetFileDescriptor fileDescriptor=activity.getAssets().openFd(\"model.tflite\");\r\n        FileInputStream inputStream=new FileInputStream(fileDescriptor.getFileDescriptor());\r\n        FileChannel fileChannel=inputStream.getChannel();\r\n        long startoffset = fileDescriptor.getStartOffset();\r\n        long declaredLength=fileDescriptor.getDeclaredLength();\r\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY,startoffset,declaredLength);\r\n    }\r\n\r\n    private TensorOperator getPreprocessNormalizeOp() {\r\n        return new NormalizeOp(IMAGE_MEAN, IMAGE_STD);\r\n    }\r\n    private TensorOperator getPostprocessNormalizeOp(){\r\n        return new NormalizeOp(PROBABILITY_MEAN, PROBABILITY_STD);\r\n    }\r\n\r\n    private void showresult(){\r\n\r\n        try{\r\n            labels = FileUtil.loadLabels(this,\"dict.txt\");\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        Map<String, Float> labeledProbability =\r\n                new TensorLabel(labels, probabilityProcessor.process(outputProbabilityBuffer))\r\n                        .getMapWithFloatValue();\r\n        float maxValueInMap =(Collections.max(labeledProbability.values()));\r\n\r\n        for (Map.Entry<String, Float> entry : labeledProbability.entrySet()) {\r\n            if (entry.getValue()==maxValueInMap) {\r\n                classitext.setText(entry.getKey());\r\n            }\r\n        }\r\n\r\n        tflite.close();\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {\r\n            Uri selectedImage = data.getData();\r\n            String[] filePathColumn = { MediaStore.Images.Media.DATA };\r\n            Cursor cursor = getContentResolver().query(selectedImage,\r\n                    filePathColumn, null, null, null);\r\n            cursor.moveToFirst();\r\n            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);\r\n            picturePath = cursor.getString(columnIndex);\r\n            cursor.close();\r\n\r\n            Intent intent = new Intent(RetakePhotoActivity.this, RetakePhotoActivity.class);\r\n            intent.putExtra(IMAGE_FILE_LOCATION, picturePath);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    public void onWindowFocusChanged(boolean hasFocus){\r\n        super.onWindowFocusChanged(hasFocus);\r\n        View decorView = getWindow().getDecorView();\r\n        if(hasFocus){\r\n            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                    |View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                    |View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                    |View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java	(revision dc671ca08fc66c2412ae7adde9a69544a2fb2db9)
+++ app/src/main/java/com/example/kodama/view/RetakePhotoActivity.java	(date 1620475868605)
@@ -266,6 +266,7 @@
                 classitext.setText(entry.getKey());
             }
         }
+        //TODO: add call to store result to db
 
         tflite.close();
     }
